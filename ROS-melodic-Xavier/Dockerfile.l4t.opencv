#
# this dockerfile roughly follows the 'Ubuntu install of ROS Melodic' from:
#   http://wiki.ros.org/melodic/Installation/Ubuntu
#
ARG BASE_IMAGE=ryrobotics/ros_melodic_l4t:ceres
FROM ${BASE_IMAGE}

ENV ROS_DISTRO=melodic

ENV DEBIAN_FRONTEND=noninteractive

WORKDIR /opt

RUN apt-get update && apt-get install -y --no-install-recommends \
        software-properties-common \
        apt-utils \
        net-tools \
        bash-completion \
        python3-pip \
        libcurl4-openssl-dev \
        && rm -rf /var/lib/apt/lists/*

################################################################################################################################
#
# OpenCV
#
# remove prebuilt opencv
RUN apt-get purge -y libopencv* python-opencv \
    && apt-get update \
    && apt-get install -y --no-install-recommends \
    build-essential pkg-config file\
    cmake libavcodec-dev libavformat-dev libavutil-dev \
    libglew-dev libgtk2.0-dev libgtk-3-dev libjpeg-dev libpng-dev libpostproc-dev \
    libswscale-dev libtbb-dev libtiff5-dev libv4l-dev libxvidcore-dev \
    libx264-dev qt5-default zlib1g-dev libgl1 libglvnd-dev pkg-config \
    libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev mesa-utils \
    python2.7-dev python3-dev python-numpy python3-numpy \
    && rm -rf /var/lib/apt/lists/*

# OpenCV looks for the cuDNN version in cudnn_version.h, but it's been renamed to cudnn_version_v8.h
RUN ln -s /usr/include/aarch64-linux-gnu/cudnn_version_v8.h /usr/include/aarch64-linux-gnu/cudnn_version.h

# ARG OPENCV_VERSION="3.4.1"
ARG OPENCV_VERSION="3.4.5"
RUN cd /opt &&\
    git clone --depth 1 --branch ${OPENCV_VERSION} https://github.com/opencv/opencv.git &&\
    cd /opt/opencv && mkdir build && cd build &&\
    cmake   -D CMAKE_BUILD_TYPE=RELEASE \
            -D BUILD_EXAMPLES=OFF \
            -D BUILD_TESTS=OFF \
            -D BUILD_PERF_TESTS=OFF \
            -D CPACK_BINARY_DEB=ON \
            -D EIGEN_INCLUDE_PATH=/usr/include/eigen3 \
	          -D WITH_EIGEN=ON \
            -D CMAKE_INSTALL_PREFIX=/usr/local \
            -D BUILD_opencv_java=OFF \
            -D WITH_CUDA=ON \
            -D CUDA_ARCH_BIN=7.2 \
            -D CUDA_ARCH_PTX="" \
            -D ENABLE_FAST_MATH=ON \
            -D CUDA_FAST_MATH=ON \
            -D WITH_CUBLAS=ON \
            -D WITH_LIBV4L=ON \
            -D WITH_GSTREAMER=ON \
            -D WITH_GSTREAMER_0_10=OFF \
            -D WITH_QT=ON \
            -D WITH_OPENGL=ON \
            -D WITH_IPP=OFF \
            -D CUDA_NVCC_FLAGS="--expt-relaxed-constexpr" \
            -D WITH_TBB=ON \
            ../

# references to related OpenCV compilation problems:
# Ref1: https://forums.developer.nvidia.com/t/opencv-with-gl-support-at-xavier/76752
# Ref2: https://forums.developer.nvidia.com/t/building-opencv-with-opengl-support/49741/17
# WARNING: The following COPY won't work as /usr/local/cuda/ is actually a mounted volume from the host!
# You will need to modify /usr/local/cuda/include/cuda_gl_interop.h on the HOST system
# COPY ./packages/cuda_gl_interop.h /usr/local/cuda/include/
# COPY ./packages/cuda_gl_interop.h /usr/local/cuda-10.2/include/
RUN cd /usr/lib/aarch64-linux-gnu/ &&\
    ln -sf libGL.so.1.0.0 libGL.so

RUN cd /opt/opencv/build && make -j$(nproc)
RUN cd /opt/opencv/build && make install
RUN cd /opt/opencv/build && make package
# Make OpenCV debian pkgs so it can be easily installed later
RUN cd /opt/opencv/build/ && tar -czvf OpenCV-${OPENCV_VERSION}-aarch64.tar.gz *.deb
RUN cp /opt/opencv/build/OpenCV-${OPENCV_VERSION}-aarch64.tar.gz /opt
#Can save ~ 10GB !
RUN rm -rf /opt/opencv/build

# Check opencv verison
RUN pkg-config --modversion opencv
